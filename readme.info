https://pkg.go.dev/github.com/hajimehoshi/ebiten
https://github.com/hajimehoshi/ebiten/wiki
https://ebiten.org/documents/performancetips.html

using master for text.BoundString() functionality
go get github.com/hajimehoshi/ebiten@master


#############################################
# TODO
#############################################
- camera
    
    would first need to draw everything in world (offscreen?)
    and use the camera to move the screen
    movement should be controlled by player
    camera ussually centers on player, except when you get to level BoundString

    https://github.com/hajimehoshi/ebiten/blob/master/examples/camera/main.go
    g.world.DrawImage(tilesImage.SubImage(image.Rect(sx, sy, sx+tileSize, sy+tileSize)).(*ebiten.Image), op)
    this uses subImage and the tilesImage already has all the contains all images (texture atlas)
    I would need to switch to Tiled for level creation and creating the texture atlas
    Think about how to still draw dynamicly, spawn stuff in which is not in level
    https://github.com/hajimehoshi/ebiten/blob/master/examples/tiles/main.go


    How would you draw images on a other image as a composition?
    basicly just as we do for screen, but then we want a world composition image
    https://pkg.go.dev/github.com/hajimehoshi/ebiten#Image.DrawImage
    basicly just dont draw it on screen, but on world and draw world on screen

    https://pkg.go.dev/github.com/hajimehoshi/ebiten#GeoM.Concat
    


- if we have scrolling levels, we need better way to create levels
    - tiled?
    - array?
    - think about spawning dynamic, stuff which is not in level
    - think about stuff which uses a lot of tiles, like a thin finish line
    - use sub image drawing, we would need to add hit objects 'under' the drawing
    - do we want to remove or destroy the level layer?
- make background components, which stretches image to screen 
- make background which loop-able with a camera
- make fuel mechanic's
- add limited nr of lives
- add damage

#############################################
# SETUP
#############################################
# init the module on location of main package
go mod init 
go build
./moonlander


#############################################
# go install + code completion + tooling
#############################################
https://golang.org/doc/install?download=go1.15.2.linux-amd64.tar.gz#download
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf go1.15.2.linux-amd64.tar.gz
export PATH=$PATH:/usr/local/go/bin

ctrl+shift+p 
go: install / update tools
go: Locate configures go tools

# Use go Language Server (gopls)
ctrl + comma
extensions >> go >> check Use Language Server
(just search for "Use Language Server")


#############################################
# DEBUG
#############################################
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch",
            "type": "go",
            "request": "launch",
            "mode": "auto",
            "program": "${workspaceFolder}",
            "env": {},
            "args": []
        },
        {
            "name": "Debug",
            "type": "go",
            "request": "launch",
            "mode": "debug",
            "program": "${workspaceFolder}",
            "env": {},
            "args": []
        }
    ]
}
   

#############################################
# run / test WebAssembly
#############################################
cd /home/rob/work/projects/go/src/moonlander
wasmserve 


#############################################
# build WebAssembly 
#############################################

# add mine type to ngninx
sudo nano /etc/nginx/mime.types
application/wasm                                wasm;
sudo systemctl restart nginx

# clear cache or use incognito mode
http://localhost/wasm/index.html



